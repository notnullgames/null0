name: Release Linux

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-linux:
    strategy:
      matrix:
        include:
          - arch: x86_64
            os: ubuntu-latest
            container: false
            artifact: null0_linux.zip
          - arch: arm64
            os: ubuntu-24.04-arm64
            container: false
            artifact: null0_linux_arm64.zip
          - arch: armhf
            os: ubuntu-latest
            container: true
            platform: linux/arm/v7
            image: arm32v7/ubuntu:24.04
            artifact: null0_linux_armhf.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for armhf)
        if: matrix.container == true
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm

      - name: Build Native Linux Host (x86_64)
        if: matrix.container == false && matrix.arch == 'x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libwayland-dev libwayland-bin libxkbcommon-dev zip
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --target host
          cd build/host
          zip ../../${{ matrix.artifact }} null0

      - name: Build Native Linux Host (arm64)
        if: matrix.container == false && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends curl git pkg-config cmake build-essential zip \
            libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libwayland-dev libwayland-bin libxkbcommon-dev clang
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
            -DWAMR_BUILD_SIMD=0 -DWAMR_BUILD_INVOKE_NATIVE_GENERAL=1 \
            -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_FLAGS="-Wno-unknown-warning-option -Wno-unused-command-line-argument" \
            -DCMAKE_CXX_FLAGS="-Wno-unknown-warning-option -Wno-unused-command-line-argument"
          cmake --build build --target host
          cd build/host
          zip ../../${{ matrix.artifact }} null0

      - name: Build in ARM container (armhf)
        if: matrix.container == true
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.image }}
          options: |
            --platform=${{ matrix.platform }}
            -v ${{ github.workspace }}:/work
            -w /work
          run: |
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              ca-certificates curl git pkg-config cmake clang clang-tools build-essential ninja-build zip \
              libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libwayland-dev libwayland-bin libxkbcommon-dev
            update-ca-certificates || true
            cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
              -DWAMR_BUILD_SIMD=0 -DWAMR_BUILD_INVOKE_NATIVE_GENERAL=1 \
              -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
              -DCMAKE_C_FLAGS="-Wno-unknown-warning-option -Wno-unused-command-line-argument" \
              -DCMAKE_CXX_FLAGS="-Wno-unknown-warning-option -Wno-unused-command-line-argument"
            cmake --build build --target host
            cd build/host
            zip ../../${{ matrix.artifact }} null0

      - name: Upload asset to release
        run: gh release upload ${{ github.event.release.tag_name }} ${{ matrix.artifact }}
        env:
          GH_TOKEN: ${{ github.token }}
