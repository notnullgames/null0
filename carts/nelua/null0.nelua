-- null0 API for Nelua

##[[
cinclude 'null0.h'
]]

global Dimensions <cimport'Dimensions', nodecl> = @record{
  width: uint32,
  height: uint32
}

global Vector <cimport'Vector', nodecl> = @record{
  x: int32,
  y: int32
}

global Rectangle <cimport'Rectangle', nodecl> = @record{
  x: int32,
  y: int32,
  width: int32,
  height: int32
}

global Color <cimport'Color', nodecl> = @record{
  r: uint8,
  g: uint8,
  b: uint8,
  a: uint8
}

global ImageFilter <cimport'ImageFilter', nodecl> = @enum(int32){
  FILTER_NEARESTNEIGHBOR = 0,
  FILTER_BILINEAR = 1,
  FILTER_SMOOTH = 2
}

global Key <cimport'Key', nodecl> = @enum(int32){
  KEY_INVALID = 0,
  KEY_SPACE = 32,
  KEY_APOSTROPHE = 39,
  KEY_COMMA = 44,
  KEY_MINUS = 45,
  KEY_PERIOD = 46,
  KEY_SLASH = 47,
  KEY_0 = 48,
  KEY_1 = 49,
  KEY_2 = 50,
  KEY_3 = 51,
  KEY_4 = 52,
  KEY_5 = 53,
  KEY_6 = 54,
  KEY_7 = 55,
  KEY_8 = 56,
  KEY_9 = 57,
  KEY_SEMICOLON = 59,
  KEY_EQUAL = 61,
  KEY_A = 65,
  KEY_B = 66,
  KEY_C = 67,
  KEY_D = 68,
  KEY_E = 69,
  KEY_F = 70,
  KEY_G = 71,
  KEY_H = 72,
  KEY_I = 73,
  KEY_J = 74,
  KEY_K = 75,
  KEY_L = 76,
  KEY_M = 77,
  KEY_N = 78,
  KEY_O = 79,
  KEY_P = 80,
  KEY_Q = 81,
  KEY_R = 82,
  KEY_S = 83,
  KEY_T = 84,
  KEY_U = 85,
  KEY_V = 86,
  KEY_W = 87,
  KEY_X = 88,
  KEY_Y = 89,
  KEY_Z = 90,
  KEY_LEFT_BRACKET = 91,
  KEY_BACKSLASH = 92,
  KEY_RIGHT_BRACKET = 93,
  KEY_GRAVE_ACCENT = 96,
  KEY_WORLD_1 = 161,
  KEY_WORLD_2 = 162,
  KEY_ESCAPE = 256,
  KEY_ENTER = 257,
  KEY_TAB = 258,
  KEY_BACKSPACE = 259,
  KEY_INSERT = 260,
  KEY_DELETE = 261,
  KEY_RIGHT = 262,
  KEY_LEFT = 263,
  KEY_DOWN = 264,
  KEY_UP = 265,
  KEY_PAGE_UP = 266,
  KEY_PAGE_DOWN = 267,
  KEY_HOME = 268,
  KEY_END = 269,
  KEY_CAPS_LOCK = 280,
  KEY_SCROLL_LOCK = 281,
  KEY_NUM_LOCK = 282,
  KEY_PRINT_SCREEN = 283,
  KEY_PAUSE = 284,
  KEY_F1 = 290,
  KEY_F2 = 291,
  KEY_F3 = 292,
  KEY_F4 = 293,
  KEY_F5 = 294,
  KEY_F6 = 295,
  KEY_F7 = 296,
  KEY_F8 = 297,
  KEY_F9 = 298,
  KEY_F10 = 299,
  KEY_F11 = 300,
  KEY_F12 = 301,
  KEY_F13 = 302,
  KEY_F14 = 303,
  KEY_F15 = 304,
  KEY_F16 = 305,
  KEY_F17 = 306,
  KEY_F18 = 307,
  KEY_F19 = 308,
  KEY_F20 = 309,
  KEY_F21 = 310,
  KEY_F22 = 311,
  KEY_F23 = 312,
  KEY_F24 = 313,
  KEY_F25 = 314,
  KEY_KP_0 = 320,
  KEY_KP_1 = 321,
  KEY_KP_2 = 322,
  KEY_KP_3 = 323,
  KEY_KP_4 = 324,
  KEY_KP_5 = 325,
  KEY_KP_6 = 326,
  KEY_KP_7 = 327,
  KEY_KP_8 = 328,
  KEY_KP_9 = 329,
  KEY_KP_DECIMAL = 330,
  KEY_KP_DIVIDE = 331,
  KEY_KP_MULTIPLY = 332,
  KEY_KP_SUBTRACT = 333,
  KEY_KP_ADD = 334,
  KEY_KP_ENTER = 335,
  KEY_KP_EQUAL = 336,
  KEY_LEFT_SHIFT = 340,
  KEY_LEFT_CONTROL = 341,
  KEY_LEFT_ALT = 342,
  KEY_LEFT_SUPER = 343,
  KEY_RIGHT_SHIFT = 344,
  KEY_RIGHT_CONTROL = 345,
  KEY_RIGHT_ALT = 346,
  KEY_RIGHT_SUPER = 347,
  KEY_MENU = 348
}

global GamepadButton <cimport'GamepadButton', nodecl> = @enum(int32){
  GAMEPAD_BUTTON_UNKNOWN = 0,
  GAMEPAD_BUTTON_UP = 1,
  GAMEPAD_BUTTON_RIGHT = 2,
  GAMEPAD_BUTTON_DOWN = 3,
  GAMEPAD_BUTTON_LEFT = 4,
  GAMEPAD_BUTTON_Y = 5,
  GAMEPAD_BUTTON_B = 6,
  GAMEPAD_BUTTON_A = 7,
  GAMEPAD_BUTTON_X = 8,
  GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
  GAMEPAD_BUTTON_LEFT_TRIGGER = 10,
  GAMEPAD_BUTTON_RIGHT_SHOULDER = 11,
  GAMEPAD_BUTTON_RIGHT_TRIGGER = 12,
  GAMEPAD_BUTTON_SELECT = 13,
  GAMEPAD_BUTTON_MENU = 14,
  GAMEPAD_BUTTON_START = 15,
  GAMEPAD_BUTTON_LEFT_THUMB = 16,
  GAMEPAD_BUTTON_RIGHT_THUMB = 17
}

global MouseButton <cimport'MouseButton', nodecl> = @enum(int32){
  MOUSE_BUTTON_UNKNOWN = 0,
  MOUSE_BUTTON_LEFT = 1,
  MOUSE_BUTTON_RIGHT = 2,
  MOUSE_BUTTON_MIDDLE = 3
}

global SCREEN: int32 = 0
global SCREEN_WIDTH: int32 = 640
global SCREEN_HEIGHT: int32 = 480
global FONT_DEFAULT: int32 = 0

global LIGHTGRAY: Color <cimport, nodecl>
global GRAY: Color <cimport, nodecl>
global DARKGRAY: Color <cimport, nodecl>
global YELLOW: Color <cimport, nodecl>
global GOLD: Color <cimport, nodecl>
global ORANGE: Color <cimport, nodecl>
global PINK: Color <cimport, nodecl>
global RED: Color <cimport, nodecl>
global MAROON: Color <cimport, nodecl>
global GREEN: Color <cimport, nodecl>
global LIME: Color <cimport, nodecl>
global DARKGREEN: Color <cimport, nodecl>
global SKYBLUE: Color <cimport, nodecl>
global BLUE: Color <cimport, nodecl>
global DARKBLUE: Color <cimport, nodecl>
global PURPLE: Color <cimport, nodecl>
global VIOLET: Color <cimport, nodecl>
global DARKPURPLE: Color <cimport, nodecl>
global BEIGE: Color <cimport, nodecl>
global BROWN: Color <cimport, nodecl>
global DARKBROWN: Color <cimport, nodecl>
global WHITE: Color <cimport, nodecl>
global BLACK: Color <cimport, nodecl>
global BLANK: Color <cimport, nodecl>
global MAGENTA: Color <cimport, nodecl>
global RAYWHITE: Color <cimport, nodecl>


-- UTILITIES

-- Get system-time (ms) since unix epoch
global function current_time(): uint64 <cimport,nodecl> end

-- Get the change in time (seconds) since the last update run
global function delta_time(): float32 <cimport,nodecl> end

-- Get a random integer between 2 numbers
global function random_int(min: int32, max: int32): int32 <cimport,nodecl> end

-- Get the random-seed
global function random_seed_get(): uint64 <cimport,nodecl> end

-- Set the random-seed
global function random_seed_set(seed: uint64): void <cimport,nodecl> end


-- SOUND

-- Load a sound from a file in cart
global function load_sound(filename: cstring): uint32 <cimport,nodecl> end

-- Play a sound
global function play_sound(sound: uint32, loop: boolean): void <cimport,nodecl> end

-- Stop a sound
global function stop_sound(sound: uint32): void <cimport,nodecl> end

-- Unload a sound
global function unload_sound(sound: uint32): void <cimport,nodecl> end


-- INPUT

-- Has the key been pressed? (tracks unpress/read correctly)
global function key_pressed(key: Key): boolean <cimport,nodecl> end

-- Is the key currently down?
global function key_down(key: Key): boolean <cimport,nodecl> end

-- Has the key been released? (tracks press/read correctly)
global function key_released(key: Key): boolean <cimport,nodecl> end

-- Is the key currently up?
global function key_up(key: Key): boolean <cimport,nodecl> end

-- Has the button been pressed? (tracks unpress/read correctly)
global function gamepad_button_pressed(gamepad: int32, button: GamepadButton): boolean <cimport,nodecl> end

-- Is the button currently down?
global function gamepad_button_down(gamepad: int32, button: GamepadButton): boolean <cimport,nodecl> end

-- Has the button been released? (tracks press/read correctly)
global function gamepad_button_released(gamepad: int32, button: GamepadButton): boolean <cimport,nodecl> end

-- Get current position of mouse
global function mouse_position(): *Vector <cimport,nodecl> end

-- Has the button been pressed? (tracks unpress/read correctly)
global function mouse_button_pressed(button: MouseButton): boolean <cimport,nodecl> end

-- Is the button currently down?
global function mouse_button_down(button: MouseButton): boolean <cimport,nodecl> end

-- Has the button been released? (tracks press/read correctly)
global function mouse_button_released(button: MouseButton): boolean <cimport,nodecl> end

-- Is the button currently up?
global function mouse_button_up(button: MouseButton): boolean <cimport,nodecl> end


-- GRAPHICS

-- Create a new blank image
global function new_image(width: int32, height: int32, color: Color): uint32 <cimport,nodecl> end

-- Copy an image to a new image
global function image_copy(image: uint32): uint32 <cimport,nodecl> end

-- Create an image from a region of another image
global function image_subimage(image: uint32, x: int32, y: int32, width: int32, height: int32): uint32 <cimport,nodecl> end

-- Clear the screen
global function clear(color: Color): void <cimport,nodecl> end

-- Draw a single pixel on the screen
global function draw_point(x: int32, y: int32, color: Color): void <cimport,nodecl> end

-- Draw a line on the screen
global function draw_line(startPosX: int32, startPosY: int32, endPosX: int32, endPosY: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled rectangle on the screen
global function draw_rectangle(posX: int32, posY: int32, width: int32, height: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled triangle on the screen
global function draw_triangle(x1: int32, y1: int32, x2: int32, y2: int32, x3: int32, y3: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled ellipse on the screen
global function draw_ellipse(centerX: int32, centerY: int32, radiusX: int32, radiusY: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled circle on the screen
global function draw_circle(centerX: int32, centerY: int32, radius: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled polygon on the screen
global function draw_polygon(points: *Vector, numPoints: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled arc on the screen
global function draw_arc(centerX: int32, centerY: int32, radius: float32, startAngle: float32, endAngle: float32, segments: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled round-rectangle on the screen
global function draw_rectangle_rounded(x: int32, y: int32, width: int32, height: int32, cornerRadius: int32, color: Color): void <cimport,nodecl> end

-- Draw an image on the screen
global function draw_image(src: uint32, posX: int32, posY: int32): void <cimport,nodecl> end

-- Draw a tinted image on the screen
global function draw_image_tint(src: uint32, posX: int32, posY: int32, tint: Color): void <cimport,nodecl> end

-- Draw an image, rotated, on the screen
global function draw_image_rotated(src: uint32, posX: int32, posY: int32, degrees: float32, offsetX: float32, offsetY: float32, filter: ImageFilter): void <cimport,nodecl> end

-- Draw an image, flipped, on the screen
global function draw_image_flipped(src: uint32, posX: int32, posY: int32, flipHorizontal: boolean, flipVertical: boolean, flipDiagonal: boolean): void <cimport,nodecl> end

-- Draw an image, scaled, on the screen
global function draw_image_scaled(src: uint32, posX: int32, posY: int32, scaleX: float32, scaleY: float32, offsetX: float32, offsetY: float32, filter: ImageFilter): void <cimport,nodecl> end

-- Draw some text on the screen
global function draw_text(font: uint32, text: cstring, posX: int32, posY: int32, color: Color): void <cimport,nodecl> end

-- Save an image to persistant storage
global function save_image(image: uint32, filename: cstring): void <cimport,nodecl> end

-- Load an image from a file in cart
global function load_image(filename: cstring): uint32 <cimport,nodecl> end

-- Resize an image, return copy
global function image_resize(image: uint32, newWidth: int32, newHeight: int32, filter: ImageFilter): uint32 <cimport,nodecl> end

-- Scale an image, return copy
global function image_scale(image: uint32, scaleX: float32, scaleY: float32, filter: ImageFilter): uint32 <cimport,nodecl> end

-- Replace a color in an image, in-place
global function image_color_replace(image: uint32, color: Color, replace: Color): void <cimport,nodecl> end

-- Tint a color in an image, in-place
global function image_color_tint(image: uint32, color: Color): void <cimport,nodecl> end

-- Fade a color in an image, in-place
global function image_color_fade(image: uint32, alpha: float32): void <cimport,nodecl> end

-- Copy a font to a new font
global function font_copy(font: uint32): uint32 <cimport,nodecl> end

-- Scale a font, return a new font
global function font_scale(font: uint32, scaleX: float32, scaleY: float32, filter: ImageFilter): uint32 <cimport,nodecl> end

-- Load a BMF font from a file in cart
global function load_font_bmf(filename: cstring, characters: cstring): uint32 <cimport,nodecl> end

-- Load a BMF font from an image
global function load_font_bmf_from_image(image: uint32, characters: cstring): uint32 <cimport,nodecl> end

-- Measure the size of some text
global function measure_text(font: uint32, text: cstring, textLength: int32): *Dimensions <cimport,nodecl> end

-- Meaure an image (use 0 for screen)
global function measure_image(image: uint32): *Dimensions <cimport,nodecl> end

-- Load a TTY font from a file in cart
global function load_font_tty(filename: cstring, glyphWidth: int32, glyphHeight: int32, characters: cstring): uint32 <cimport,nodecl> end

-- Load a TTY font from an image
global function load_font_tty_from_image(image: uint32, glyphWidth: int32, glyphHeight: int32, characters: cstring): uint32 <cimport,nodecl> end

-- Load a TTF font from a file in cart
global function load_font_ttf(filename: cstring, fontSize: int32): uint32 <cimport,nodecl> end

-- Invert the colors in an image, in-place
global function image_color_invert(image: uint32): void <cimport,nodecl> end

-- Calculate a rectangle representing the available alpha border in an image
global function image_alpha_border(image: uint32, threshold: float32): Rectangle <cimport,nodecl> end

-- Crop an image, in-place
global function image_crop(image: uint32, x: int32, y: int32, width: int32, height: int32): void <cimport,nodecl> end

-- Crop an image based on the alpha border, in-place
global function image_alpha_crop(image: uint32, threshold: float32): void <cimport,nodecl> end

-- Adjust the brightness of an image, in-place
global function image_color_brightness(image: uint32, factor: float32): void <cimport,nodecl> end

-- Flip an image, in-place
global function image_flip(image: uint32, horizontal: boolean, vertical: boolean): void <cimport,nodecl> end

-- Change the contrast of an image, in-place
global function image_color_contrast(image: uint32, contrast: float32): void <cimport,nodecl> end

-- Use an image as an alpha-mask on another image
global function image_alpha_mask(image: uint32, alphaMask: uint32, posX: int32, posY: int32): void <cimport,nodecl> end

-- Create a new image, rotating another image
global function image_rotate(image: uint32, degrees: float32, filter: ImageFilter): uint32 <cimport,nodecl> end

-- Create a new image of a gradient
global function image_gradient(width: int32, height: int32, topLeft: Color, topRight: Color, bottomLeft: Color, bottomRight: Color): uint32 <cimport,nodecl> end

-- Unload an image
global function unload_image(image: uint32): void <cimport,nodecl> end

-- Unload a font
global function unload_font(font: uint32): void <cimport,nodecl> end

-- Clear an image
global function clear_image(destination: uint32, color: Color): void <cimport,nodecl> end

-- Draw a single pixel on an image
global function draw_point_on_image(destination: uint32, x: int32, y: int32, color: Color): void <cimport,nodecl> end

-- Draw a line on an image
global function draw_line_on_image(destination: uint32, startPosX: int32, startPosY: int32, endPosX: int32, endPosY: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled rectangle on an image
global function draw_rectangle_on_image(destination: uint32, posX: int32, posY: int32, width: int32, height: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled triangle on an image
global function draw_triangle_on_image(destination: uint32, x1: int32, y1: int32, x2: int32, y2: int32, x3: int32, y3: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled ellipse on an image
global function draw_ellipse_on_image(destination: uint32, centerX: int32, centerY: int32, radiusX: int32, radiusY: int32, color: Color): void <cimport,nodecl> end

-- Draw a circle on an image
global function draw_circle_on_image(destination: uint32, centerX: int32, centerY: int32, radius: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled polygon on an image
global function draw_polygon_on_image(destination: uint32, points: *Vector, numPoints: int32, color: Color): void <cimport,nodecl> end

-- Draw a filled round-rectangle on an image
global function draw_rectangle_rounded_on_image(destination: uint32, x: int32, y: int32, width: int32, height: int32, cornerRadius: int32, color: Color): void <cimport,nodecl> end

-- Draw an image on an image
global function draw_image_on_image(destination: uint32, src: uint32, posX: int32, posY: int32): void <cimport,nodecl> end

-- Draw a tinted image on an image
global function draw_image_tint_on_image(destination: uint32, src: uint32, posX: int32, posY: int32, tint: Color): void <cimport,nodecl> end

-- Draw an image, rotated, on an image
global function draw_image_rotated_on_image(destination: uint32, src: uint32, posX: int32, posY: int32, degrees: float32, offsetX: float32, offsetY: float32, filter: ImageFilter): void <cimport,nodecl> end

-- Draw an image, flipped, on an image
global function draw_image_flipped_on_image(destination: uint32, src: uint32, posX: int32, posY: int32, flipHorizontal: boolean, flipVertical: boolean, flipDiagonal: boolean): void <cimport,nodecl> end

-- Draw an image, scaled, on an image
global function draw_image_scaled_on_image(destination: uint32, src: uint32, posX: int32, posY: int32, scaleX: float32, scaleY: float32, offsetX: float32, offsetY: float32, filter: ImageFilter): void <cimport,nodecl> end

-- Draw some text on an image
global function draw_text_on_image(destination: uint32, font: uint32, text: cstring, posX: int32, posY: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) rectangle on the screen
global function draw_rectangle_outline(posX: int32, posY: int32, width: int32, height: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) triangle on the screen
global function draw_triangle_outline(x1: int32, y1: int32, x2: int32, y2: int32, x3: int32, y3: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) ellipse on the screen
global function draw_ellipse_outline(centerX: int32, centerY: int32, radiusX: int32, radiusY: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) circle on the screen
global function draw_circle_outline(centerX: int32, centerY: int32, radius: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) polygon on the screen
global function draw_polygon_outline(points: *Vector, numPoints: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) arc on the screen
global function draw_arc_outline(centerX: int32, centerY: int32, radius: float32, startAngle: float32, endAngle: float32, segments: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) round-rectangle on the screen
global function draw_rectangle_rounded_outline(x: int32, y: int32, width: int32, height: int32, cornerRadius: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) rectangle on an image
global function draw_rectangle_outline_on_image(destination: uint32, posX: int32, posY: int32, width: int32, height: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) triangle on an image
global function draw_triangle_outline_on_image(destination: uint32, x1: int32, y1: int32, x2: int32, y2: int32, x3: int32, y3: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) ellipse on an image
global function draw_ellipse_outline_on_image(destination: uint32, centerX: int32, centerY: int32, radiusX: int32, radiusY: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) circle on an image
global function draw_circle_outline_on_image(destination: uint32, centerX: int32, centerY: int32, radius: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) polygon on an image
global function draw_polygon_outline_on_image(destination: uint32, points: *Vector, numPoints: int32, thickness: int32, color: Color): void <cimport,nodecl> end

-- Draw a outlined (with thickness) round-rectangle on an image
global function draw_rectangle_rounded_outline_on_image(destination: uint32, x: int32, y: int32, width: int32, height: int32, cornerRadius: int32, thickness: int32, color: Color): void <cimport,nodecl> end


-- COLORS

-- Tint a color with another color
global function color_tint(color: Color, tint: Color): Color <cimport,nodecl> end

-- Fade a color
global function color_fade(color: Color, alpha: float32): Color <cimport,nodecl> end

-- Change the brightness of a color
global function color_brightness(color: Color, factor: float32): Color <cimport,nodecl> end

-- Invert a color
global function color_invert(color: Color): Color <cimport,nodecl> end

-- Blend 2 colors together
global function color_alpha_blend(dst: Color, src: Color): Color <cimport,nodecl> end

-- Change contrast of a color
global function color_contrast(color: Color, contrast: float32): Color <cimport,nodecl> end

-- Interpolate colors
global function color_bilinear_interpolate(color00: Color, color01: Color, color10: Color, color11: Color, coordinateX: float32, coordinateY: float32): Color <cimport,nodecl> end
